/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/service.worker.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/mustache/mustache.js":
/*!*******************************************!*\
  !*** ./node_modules/mustache/mustache.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// This file has been generated from mustache.mjs\n(function (global, factory) {\n   true ? module.exports = factory() :\n  undefined;\n}(this, (function () { 'use strict';\n\n  /*!\n   * mustache.js - Logic-less {{mustache}} templates with JavaScript\n   * http://github.com/janl/mustache.js\n   */\n\n  var objectToString = Object.prototype.toString;\n  var isArray = Array.isArray || function isArrayPolyfill (object) {\n    return objectToString.call(object) === '[object Array]';\n  };\n\n  function isFunction (object) {\n    return typeof object === 'function';\n  }\n\n  /**\n   * More correct typeof string handling array\n   * which normally returns typeof 'object'\n   */\n  function typeStr (obj) {\n    return isArray(obj) ? 'array' : typeof obj;\n  }\n\n  function escapeRegExp (string) {\n    return string.replace(/[\\-\\[\\]{}()*+?.,\\\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  /**\n   * Null safe way of checking whether or not an object,\n   * including its prototype, has a given property\n   */\n  function hasProperty (obj, propName) {\n    return obj != null && typeof obj === 'object' && (propName in obj);\n  }\n\n  /**\n   * Safe way of detecting whether or not the given thing is a primitive and\n   * whether it has the given property\n   */\n  function primitiveHasOwnProperty (primitive, propName) {\n    return (\n      primitive != null\n      && typeof primitive !== 'object'\n      && primitive.hasOwnProperty\n      && primitive.hasOwnProperty(propName)\n    );\n  }\n\n  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577\n  // See https://github.com/janl/mustache.js/issues/189\n  var regExpTest = RegExp.prototype.test;\n  function testRegExp (re, string) {\n    return regExpTest.call(re, string);\n  }\n\n  var nonSpaceRe = /\\S/;\n  function isWhitespace (string) {\n    return !testRegExp(nonSpaceRe, string);\n  }\n\n  var entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n\n  function escapeHtml (string) {\n    return String(string).replace(/[&<>\"'`=\\/]/g, function fromEntityMap (s) {\n      return entityMap[s];\n    });\n  }\n\n  var whiteRe = /\\s*/;\n  var spaceRe = /\\s+/;\n  var equalsRe = /\\s*=/;\n  var curlyRe = /\\s*\\}/;\n  var tagRe = /#|\\^|\\/|>|\\{|&|=|!/;\n\n  /**\n   * Breaks up the given `template` string into a tree of tokens. If the `tags`\n   * argument is given here it must be an array with two string values: the\n   * opening and closing tags used in the template (e.g. [ \"<%\", \"%>\" ]). Of\n   * course, the default is to use mustaches (i.e. mustache.tags).\n   *\n   * A token is an array with at least 4 elements. The first element is the\n   * mustache symbol that was used inside the tag, e.g. \"#\" or \"&\". If the tag\n   * did not contain a symbol (i.e. {{myValue}}) this element is \"name\". For\n   * all text that appears outside a symbol this element is \"text\".\n   *\n   * The second element of a token is its \"value\". For mustache tags this is\n   * whatever else was inside the tag besides the opening symbol. For text tokens\n   * this is the text itself.\n   *\n   * The third and fourth elements of the token are the start and end indices,\n   * respectively, of the token in the original template.\n   *\n   * Tokens that are the root node of a subtree contain two more elements: 1) an\n   * array of tokens in the subtree and 2) the index in the original template at\n   * which the closing tag for that section begins.\n   *\n   * Tokens for partials also contain two more elements: 1) a string value of\n   * indendation prior to that tag and 2) the index of that tag on that line -\n   * eg a value of 2 indicates the partial is the third tag on this line.\n   */\n  function parseTemplate (template, tags) {\n    if (!template)\n      return [];\n    var lineHasNonSpace = false;\n    var sections = [];     // Stack to hold section tokens\n    var tokens = [];       // Buffer to hold the tokens\n    var spaces = [];       // Indices of whitespace tokens on the current line\n    var hasTag = false;    // Is there a {{tag}} on the current line?\n    var nonSpace = false;  // Is there a non-space char on the current line?\n    var indentation = '';  // Tracks indentation for tags that use it\n    var tagIndex = 0;      // Stores a count of number of tags encountered on a line\n\n    // Strips all whitespace tokens array for the current line\n    // if there was a {{#tag}} on it and otherwise only space.\n    function stripSpace () {\n      if (hasTag && !nonSpace) {\n        while (spaces.length)\n          delete tokens[spaces.pop()];\n      } else {\n        spaces = [];\n      }\n\n      hasTag = false;\n      nonSpace = false;\n    }\n\n    var openingTagRe, closingTagRe, closingCurlyRe;\n    function compileTags (tagsToCompile) {\n      if (typeof tagsToCompile === 'string')\n        tagsToCompile = tagsToCompile.split(spaceRe, 2);\n\n      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)\n        throw new Error('Invalid tags: ' + tagsToCompile);\n\n      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\\\s*');\n      closingTagRe = new RegExp('\\\\s*' + escapeRegExp(tagsToCompile[1]));\n      closingCurlyRe = new RegExp('\\\\s*' + escapeRegExp('}' + tagsToCompile[1]));\n    }\n\n    compileTags(tags || mustache.tags);\n\n    var scanner = new Scanner(template);\n\n    var start, type, value, chr, token, openSection;\n    while (!scanner.eos()) {\n      start = scanner.pos;\n\n      // Match any text between tags.\n      value = scanner.scanUntil(openingTagRe);\n\n      if (value) {\n        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {\n          chr = value.charAt(i);\n\n          if (isWhitespace(chr)) {\n            spaces.push(tokens.length);\n            indentation += chr;\n          } else {\n            nonSpace = true;\n            lineHasNonSpace = true;\n            indentation += ' ';\n          }\n\n          tokens.push([ 'text', chr, start, start + 1 ]);\n          start += 1;\n\n          // Check for whitespace on the current line.\n          if (chr === '\\n') {\n            stripSpace();\n            indentation = '';\n            tagIndex = 0;\n            lineHasNonSpace = false;\n          }\n        }\n      }\n\n      // Match the opening tag.\n      if (!scanner.scan(openingTagRe))\n        break;\n\n      hasTag = true;\n\n      // Get the tag type.\n      type = scanner.scan(tagRe) || 'name';\n      scanner.scan(whiteRe);\n\n      // Get the tag value.\n      if (type === '=') {\n        value = scanner.scanUntil(equalsRe);\n        scanner.scan(equalsRe);\n        scanner.scanUntil(closingTagRe);\n      } else if (type === '{') {\n        value = scanner.scanUntil(closingCurlyRe);\n        scanner.scan(curlyRe);\n        scanner.scanUntil(closingTagRe);\n        type = '&';\n      } else {\n        value = scanner.scanUntil(closingTagRe);\n      }\n\n      // Match the closing tag.\n      if (!scanner.scan(closingTagRe))\n        throw new Error('Unclosed tag at ' + scanner.pos);\n\n      if (type == '>') {\n        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];\n      } else {\n        token = [ type, value, start, scanner.pos ];\n      }\n      tagIndex++;\n      tokens.push(token);\n\n      if (type === '#' || type === '^') {\n        sections.push(token);\n      } else if (type === '/') {\n        // Check section nesting.\n        openSection = sections.pop();\n\n        if (!openSection)\n          throw new Error('Unopened section \"' + value + '\" at ' + start);\n\n        if (openSection[1] !== value)\n          throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + start);\n      } else if (type === 'name' || type === '{' || type === '&') {\n        nonSpace = true;\n      } else if (type === '=') {\n        // Set the tags for the next time around.\n        compileTags(value);\n      }\n    }\n\n    stripSpace();\n\n    // Make sure there are no open sections when we're done.\n    openSection = sections.pop();\n\n    if (openSection)\n      throw new Error('Unclosed section \"' + openSection[1] + '\" at ' + scanner.pos);\n\n    return nestTokens(squashTokens(tokens));\n  }\n\n  /**\n   * Combines the values of consecutive text tokens in the given `tokens` array\n   * to a single token.\n   */\n  function squashTokens (tokens) {\n    var squashedTokens = [];\n\n    var token, lastToken;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      if (token) {\n        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {\n          lastToken[1] += token[1];\n          lastToken[3] = token[3];\n        } else {\n          squashedTokens.push(token);\n          lastToken = token;\n        }\n      }\n    }\n\n    return squashedTokens;\n  }\n\n  /**\n   * Forms the given array of `tokens` into a nested tree structure where\n   * tokens that represent a section have two additional items: 1) an array of\n   * all tokens that appear in that section and 2) the index in the original\n   * template that represents the end of that section.\n   */\n  function nestTokens (tokens) {\n    var nestedTokens = [];\n    var collector = nestedTokens;\n    var sections = [];\n\n    var token, section;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      token = tokens[i];\n\n      switch (token[0]) {\n        case '#':\n        case '^':\n          collector.push(token);\n          sections.push(token);\n          collector = token[4] = [];\n          break;\n        case '/':\n          section = sections.pop();\n          section[5] = token[2];\n          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;\n          break;\n        default:\n          collector.push(token);\n      }\n    }\n\n    return nestedTokens;\n  }\n\n  /**\n   * A simple string scanner that is used by the template parser to find\n   * tokens in template strings.\n   */\n  function Scanner (string) {\n    this.string = string;\n    this.tail = string;\n    this.pos = 0;\n  }\n\n  /**\n   * Returns `true` if the tail is empty (end of string).\n   */\n  Scanner.prototype.eos = function eos () {\n    return this.tail === '';\n  };\n\n  /**\n   * Tries to match the given regular expression at the current position.\n   * Returns the matched text if it can match, the empty string otherwise.\n   */\n  Scanner.prototype.scan = function scan (re) {\n    var match = this.tail.match(re);\n\n    if (!match || match.index !== 0)\n      return '';\n\n    var string = match[0];\n\n    this.tail = this.tail.substring(string.length);\n    this.pos += string.length;\n\n    return string;\n  };\n\n  /**\n   * Skips all text until the given regular expression can be matched. Returns\n   * the skipped string, which is the entire tail if no match can be made.\n   */\n  Scanner.prototype.scanUntil = function scanUntil (re) {\n    var index = this.tail.search(re), match;\n\n    switch (index) {\n      case -1:\n        match = this.tail;\n        this.tail = '';\n        break;\n      case 0:\n        match = '';\n        break;\n      default:\n        match = this.tail.substring(0, index);\n        this.tail = this.tail.substring(index);\n    }\n\n    this.pos += match.length;\n\n    return match;\n  };\n\n  /**\n   * Represents a rendering context by wrapping a view object and\n   * maintaining a reference to the parent context.\n   */\n  function Context (view, parentContext) {\n    this.view = view;\n    this.cache = { '.': this.view };\n    this.parent = parentContext;\n  }\n\n  /**\n   * Creates a new context using the given view with this context\n   * as the parent.\n   */\n  Context.prototype.push = function push (view) {\n    return new Context(view, this);\n  };\n\n  /**\n   * Returns the value of the given name in this context, traversing\n   * up the context hierarchy if the value is absent in this context's view.\n   */\n  Context.prototype.lookup = function lookup (name) {\n    var cache = this.cache;\n\n    var value;\n    if (cache.hasOwnProperty(name)) {\n      value = cache[name];\n    } else {\n      var context = this, intermediateValue, names, index, lookupHit = false;\n\n      while (context) {\n        if (name.indexOf('.') > 0) {\n          intermediateValue = context.view;\n          names = name.split('.');\n          index = 0;\n\n          /**\n           * Using the dot notion path in `name`, we descend through the\n           * nested objects.\n           *\n           * To be certain that the lookup has been successful, we have to\n           * check if the last object in the path actually has the property\n           * we are looking for. We store the result in `lookupHit`.\n           *\n           * This is specially necessary for when the value has been set to\n           * `undefined` and we want to avoid looking up parent contexts.\n           *\n           * In the case where dot notation is used, we consider the lookup\n           * to be successful even if the last \"object\" in the path is\n           * not actually an object but a primitive (e.g., a string, or an\n           * integer), because it is sometimes useful to access a property\n           * of an autoboxed primitive, such as the length of a string.\n           **/\n          while (intermediateValue != null && index < names.length) {\n            if (index === names.length - 1)\n              lookupHit = (\n                hasProperty(intermediateValue, names[index])\n                || primitiveHasOwnProperty(intermediateValue, names[index])\n              );\n\n            intermediateValue = intermediateValue[names[index++]];\n          }\n        } else {\n          intermediateValue = context.view[name];\n\n          /**\n           * Only checking against `hasProperty`, which always returns `false` if\n           * `context.view` is not an object. Deliberately omitting the check\n           * against `primitiveHasOwnProperty` if dot notation is not used.\n           *\n           * Consider this example:\n           * ```\n           * Mustache.render(\"The length of a football field is {{#length}}{{length}}{{/length}}.\", {length: \"100 yards\"})\n           * ```\n           *\n           * If we were to check also against `primitiveHasOwnProperty`, as we do\n           * in the dot notation case, then render call would return:\n           *\n           * \"The length of a football field is 9.\"\n           *\n           * rather than the expected:\n           *\n           * \"The length of a football field is 100 yards.\"\n           **/\n          lookupHit = hasProperty(context.view, name);\n        }\n\n        if (lookupHit) {\n          value = intermediateValue;\n          break;\n        }\n\n        context = context.parent;\n      }\n\n      cache[name] = value;\n    }\n\n    if (isFunction(value))\n      value = value.call(this.view);\n\n    return value;\n  };\n\n  /**\n   * A Writer knows how to take a stream of tokens and render them to a\n   * string, given a context. It also maintains a cache of templates to\n   * avoid the need to parse the same template twice.\n   */\n  function Writer () {\n    this.templateCache = {\n      _cache: {},\n      set: function set (key, value) {\n        this._cache[key] = value;\n      },\n      get: function get (key) {\n        return this._cache[key];\n      },\n      clear: function clear () {\n        this._cache = {};\n      }\n    };\n  }\n\n  /**\n   * Clears all cached templates in this writer.\n   */\n  Writer.prototype.clearCache = function clearCache () {\n    if (typeof this.templateCache !== 'undefined') {\n      this.templateCache.clear();\n    }\n  };\n\n  /**\n   * Parses and caches the given `template` according to the given `tags` or\n   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens\n   * that is generated from the parse.\n   */\n  Writer.prototype.parse = function parse (template, tags) {\n    var cache = this.templateCache;\n    var cacheKey = template + ':' + (tags || mustache.tags).join(':');\n    var isCacheEnabled = typeof cache !== 'undefined';\n    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;\n\n    if (tokens == undefined) {\n      tokens = parseTemplate(template, tags);\n      isCacheEnabled && cache.set(cacheKey, tokens);\n    }\n    return tokens;\n  };\n\n  /**\n   * High-level method that is used to render the given `template` with\n   * the given `view`.\n   *\n   * The optional `partials` argument may be an object that contains the\n   * names and templates of partials that are used in the template. It may\n   * also be a function that is used to load partial templates on the fly\n   * that takes a single argument: the name of the partial.\n   *\n   * If the optional `tags` argument is given here it must be an array with two\n   * string values: the opening and closing tags used in the template (e.g.\n   * [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  Writer.prototype.render = function render (template, view, partials, tags) {\n    var tokens = this.parse(template, tags);\n    var context = (view instanceof Context) ? view : new Context(view, undefined);\n    return this.renderTokens(tokens, context, partials, template, tags);\n  };\n\n  /**\n   * Low-level method that renders the given array of `tokens` using\n   * the given `context` and `partials`.\n   *\n   * Note: The `originalTemplate` is only ever used to extract the portion\n   * of the original template that was contained in a higher-order section.\n   * If the template doesn't use higher-order sections, this argument may\n   * be omitted.\n   */\n  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, tags) {\n    var buffer = '';\n\n    var token, symbol, value;\n    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {\n      value = undefined;\n      token = tokens[i];\n      symbol = token[0];\n\n      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);\n      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);\n      else if (symbol === '>') value = this.renderPartial(token, context, partials, tags);\n      else if (symbol === '&') value = this.unescapedValue(token, context);\n      else if (symbol === 'name') value = this.escapedValue(token, context);\n      else if (symbol === 'text') value = this.rawValue(token);\n\n      if (value !== undefined)\n        buffer += value;\n    }\n\n    return buffer;\n  };\n\n  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {\n    var self = this;\n    var buffer = '';\n    var value = context.lookup(token[1]);\n\n    // This function is used to render an arbitrary template\n    // in the current context by higher-order sections.\n    function subRender (template) {\n      return self.render(template, context, partials);\n    }\n\n    if (!value) return;\n\n    if (isArray(value)) {\n      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {\n        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);\n      }\n    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {\n      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);\n    } else if (isFunction(value)) {\n      if (typeof originalTemplate !== 'string')\n        throw new Error('Cannot use higher-order sections without the original template');\n\n      // Extract the portion of the original template that the section contains.\n      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);\n\n      if (value != null)\n        buffer += value;\n    } else {\n      buffer += this.renderTokens(token[4], context, partials, originalTemplate);\n    }\n    return buffer;\n  };\n\n  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {\n    var value = context.lookup(token[1]);\n\n    // Use JavaScript's definition of falsy. Include empty arrays.\n    // See https://github.com/janl/mustache.js/issues/186\n    if (!value || (isArray(value) && value.length === 0))\n      return this.renderTokens(token[4], context, partials, originalTemplate);\n  };\n\n  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {\n    var filteredIndentation = indentation.replace(/[^ \\t]/g, '');\n    var partialByNl = partial.split('\\n');\n    for (var i = 0; i < partialByNl.length; i++) {\n      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {\n        partialByNl[i] = filteredIndentation + partialByNl[i];\n      }\n    }\n    return partialByNl.join('\\n');\n  };\n\n  Writer.prototype.renderPartial = function renderPartial (token, context, partials, tags) {\n    if (!partials) return;\n\n    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];\n    if (value != null) {\n      var lineHasNonSpace = token[6];\n      var tagIndex = token[5];\n      var indentation = token[4];\n      var indentedValue = value;\n      if (tagIndex == 0 && indentation) {\n        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);\n      }\n      return this.renderTokens(this.parse(indentedValue, tags), context, partials, indentedValue, tags);\n    }\n  };\n\n  Writer.prototype.unescapedValue = function unescapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return value;\n  };\n\n  Writer.prototype.escapedValue = function escapedValue (token, context) {\n    var value = context.lookup(token[1]);\n    if (value != null)\n      return mustache.escape(value);\n  };\n\n  Writer.prototype.rawValue = function rawValue (token) {\n    return token[1];\n  };\n\n  var mustache = {\n    name: 'mustache.js',\n    version: '4.0.1',\n    tags: [ '{{', '}}' ],\n    clearCache: undefined,\n    escape: undefined,\n    parse: undefined,\n    render: undefined,\n    Scanner: undefined,\n    Context: undefined,\n    Writer: undefined,\n    /**\n     * Allows a user to override the default caching strategy, by providing an\n     * object with set, get and clear methods. This can also be used to disable\n     * the cache by setting it to the literal `undefined`.\n     */\n    set templateCache (cache) {\n      defaultWriter.templateCache = cache;\n    },\n    /**\n     * Gets the default or overridden caching object from the default writer.\n     */\n    get templateCache () {\n      return defaultWriter.templateCache;\n    }\n  };\n\n  // All high-level mustache.* functions use this writer.\n  var defaultWriter = new Writer();\n\n  /**\n   * Clears all cached templates in the default writer.\n   */\n  mustache.clearCache = function clearCache () {\n    return defaultWriter.clearCache();\n  };\n\n  /**\n   * Parses and caches the given template in the default writer and returns the\n   * array of tokens it contains. Doing this ahead of time avoids the need to\n   * parse templates on the fly as they are rendered.\n   */\n  mustache.parse = function parse (template, tags) {\n    return defaultWriter.parse(template, tags);\n  };\n\n  /**\n   * Renders the `template` with the given `view` and `partials` using the\n   * default writer. If the optional `tags` argument is given here it must be an\n   * array with two string values: the opening and closing tags used in the\n   * template (e.g. [ \"<%\", \"%>\" ]). The default is to mustache.tags.\n   */\n  mustache.render = function render (template, view, partials, tags) {\n    if (typeof template !== 'string') {\n      throw new TypeError('Invalid template! Template should be a \"string\" ' +\n                          'but \"' + typeStr(template) + '\" was given as the first ' +\n                          'argument for mustache#render(template, view, partials)');\n    }\n\n    return defaultWriter.render(template, view, partials, tags);\n  };\n\n  // Export the escaping function so that the user may override it.\n  // See https://github.com/janl/mustache.js/issues/244\n  mustache.escape = escapeHtml;\n\n  // Export these mainly for testing, but also for advanced usage.\n  mustache.Scanner = Scanner;\n  mustache.Context = Context;\n  mustache.Writer = Writer;\n\n  return mustache;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/mustache/mustache.js\n");

/***/ }),

/***/ "./node_modules/swork-router/dist/index.js":
/*!*************************************************!*\
  !*** ./node_modules/swork-router/dist/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst path_to_regexp_1 = __webpack_require__(/*! path-to-regexp */ \"./node_modules/swork-router/node_modules/path-to-regexp/dist.es2015/index.js\");\r\nconst configuration_1 = __webpack_require__(/*! swork/dist/configuration */ \"./node_modules/swork/dist/configuration.js\");\r\n/**\r\n * Router intended to be used with swork. Allows definition of paths and middleware to handle matching requests.\r\n *\r\n * @export\r\n * @class Router\r\n */\r\nclass Router {\r\n    /**\r\n     * Creates an instance of Router.\r\n     * @param {IRouterConfiguration} [config]\r\n     * @memberof Router\r\n     */\r\n    constructor(config) {\r\n        this.middlewareDetails = [];\r\n        this.routesCalled = false;\r\n        this.config = Object.assign({\r\n            origin: configuration_1.configuration.origin,\r\n            prefix: \"\",\r\n        }, config);\r\n        if (this.config.prefix) {\r\n            this.validatePaths([this.config.prefix]);\r\n        }\r\n    }\r\n    /**\r\n     * Defines a head request handler.\r\n     *\r\n     * @param {string} path\r\n     * @param {Middleware} middleware\r\n     * @returns {Router}\r\n     * @memberof Router\r\n     */\r\n    head(path, middleware) {\r\n        this.addMiddlewareDetails(path, [\"HEAD\"], middleware);\r\n        return this;\r\n    }\r\n    /**\r\n     * Defines an options request handler.\r\n     *\r\n     * @param {string} path\r\n     * @param {Middleware} middleware\r\n     * @returns {Router}\r\n     * @memberof Router\r\n     */\r\n    options(path, middleware) {\r\n        this.addMiddlewareDetails(path, [\"OPTIONS\"], middleware);\r\n        return this;\r\n    }\r\n    /**\r\n     * Defines a get request handler.\r\n     *\r\n     * @param {string} path\r\n     * @param {Middleware} middleware\r\n     * @returns {Router}\r\n     * @memberof Router\r\n     */\r\n    get(path, middleware) {\r\n        this.addMiddlewareDetails(path, [\"GET\"], middleware);\r\n        return this;\r\n    }\r\n    /**\r\n     * Defines a post request handler.\r\n     *\r\n     * @param {string} path\r\n     * @param {Middleware} middleware\r\n     * @returns {Router}\r\n     * @memberof Router\r\n     */\r\n    post(path, middleware) {\r\n        this.addMiddlewareDetails(path, [\"POST\"], middleware);\r\n        return this;\r\n    }\r\n    /**\r\n     * Defines a patch request handler.\r\n     *\r\n     * @param {string} path\r\n     * @param {Middleware} middleware\r\n     * @returns {Router}\r\n     * @memberof Router\r\n     */\r\n    patch(path, middleware) {\r\n        this.addMiddlewareDetails(path, [\"PATCH\"], middleware);\r\n        return this;\r\n    }\r\n    /**\r\n     * Defines a put request handler.\r\n     *\r\n     * @param {string} path\r\n     * @param {Middleware} middleware\r\n     * @returns {Router}\r\n     * @memberof Router\r\n     */\r\n    put(path, middleware) {\r\n        this.addMiddlewareDetails(path, [\"PUT\"], middleware);\r\n        return this;\r\n    }\r\n    /**\r\n     * Defines a delete request handler.\r\n     *\r\n     * @param {string} path\r\n     * @param {Middleware} middleware\r\n     * @returns {Router}\r\n     * @memberof Router\r\n     */\r\n    delete(path, middleware) {\r\n        this.addMiddlewareDetails(path, [\"DELETE\"], middleware);\r\n        return this;\r\n    }\r\n    /**\r\n     * Defines a request handler for all HTTP verbs.\r\n     *\r\n     * @param {string} path\r\n     * @param {Middleware} middleware\r\n     * @returns {Router}\r\n     * @memberof Router\r\n     */\r\n    all(path, middleware) {\r\n        this.addMiddlewareDetails(path, [\"HEAD\", \"OPTIONS\", \"GET\", \"PUT\", \"PATCH\", \"POST\", \"DELETE\"], middleware);\r\n        return this;\r\n    }\r\n    /**\r\n     * Builds the middlewares from the router to be used by swork.\r\n     *\r\n     * @returns {Middleware[]}\r\n     * @memberof Router\r\n     */\r\n    routes() {\r\n        if (this.routesCalled) {\r\n            throw new Error(\"Routes can only be called once.\");\r\n        }\r\n        if (!this.config.origin) {\r\n            throw new Error(\"Origin must be non-empty.\");\r\n        }\r\n        const middleware = [];\r\n        this.middlewareDetails.forEach((detail) => {\r\n            if (detail instanceof Router) {\r\n                if (this.config.prefix) {\r\n                    detail.config.prefix = this.config.prefix + detail.config.prefix;\r\n                }\r\n                detail.config.origin = this.config.origin;\r\n                Array.prototype.push.apply(middleware, detail.routes());\r\n            }\r\n            else {\r\n                Array.prototype.push.apply(middleware, this.build(detail.path, detail.methods, detail.middleware));\r\n            }\r\n        });\r\n        this.routesCalled = true;\r\n        return middleware;\r\n    }\r\n    /**\r\n     * Adds to the internal middlewares allowing nested routers.\r\n     *\r\n     * @param {(Router)} param\r\n     * @memberof Router\r\n     */\r\n    use(param) {\r\n        this.middlewareDetails.push(param);\r\n    }\r\n    addMiddlewareDetails(path, methods, middleware) {\r\n        if (!Array.isArray(path)) {\r\n            path = [path];\r\n        }\r\n        this.validatePaths(path);\r\n        this.middlewareDetails.push({\r\n            methods,\r\n            middleware,\r\n            path,\r\n        });\r\n    }\r\n    build(paths, methods, middleware) {\r\n        const results = [];\r\n        paths.forEach((path) => {\r\n            if (this.config.prefix) {\r\n                path = this.config.prefix + path;\r\n            }\r\n            const paramNames = [];\r\n            const regexp = path_to_regexp_1.pathToRegexp(path, paramNames);\r\n            const origin = this.config.origin;\r\n            results.push((context, next) => {\r\n                if (methods.indexOf(context.request.method) === -1) {\r\n                    return next();\r\n                }\r\n                const url = new URL(context.request.url);\r\n                if (origin !== url.origin.toLowerCase()) {\r\n                    return next();\r\n                }\r\n                if (!regexp.test(url.pathname)) {\r\n                    return next();\r\n                }\r\n                context.params = {};\r\n                if (paramNames.length) {\r\n                    const params = url.pathname.match(regexp).slice(1);\r\n                    params.forEach((value, index) => {\r\n                        context.params[paramNames[index].name] = value;\r\n                    });\r\n                }\r\n                return Promise.resolve(middleware(context, next));\r\n            });\r\n        });\r\n        return results;\r\n    }\r\n    validatePaths(paths) {\r\n        const invalidPaths = [];\r\n        paths.forEach((path) => {\r\n            if (path[0] !== \"/\") {\r\n                invalidPaths.push(path);\r\n            }\r\n            else if (path.length > 1 && path[path.length - 1] === \"/\") {\r\n                invalidPaths.push(path);\r\n            }\r\n        });\r\n        if (invalidPaths.length) {\r\n            throw new Error(`Path(s) [\"${invalidPaths.join(\"\\\", \\\"\")}\"] do not have a valid format.`);\r\n        }\r\n    }\r\n}\r\nexports.Router = Router;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/swork-router/dist/index.js\n");

/***/ }),

/***/ "./node_modules/swork-router/node_modules/path-to-regexp/dist.es2015/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/swork-router/node_modules/path-to-regexp/dist.es2015/index.js ***!
  \************************************************************************************/
/*! exports provided: parse, compile, tokensToFunction, match, regexpToFunction, tokensToRegexp, pathToRegexp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parse\", function() { return parse; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"compile\", function() { return compile; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokensToFunction\", function() { return tokensToFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"match\", function() { return match; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"regexpToFunction\", function() { return regexpToFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"tokensToRegexp\", function() { return tokensToRegexp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"pathToRegexp\", function() { return pathToRegexp; });\n/**\n * Default configs.\n */\nvar DEFAULT_DELIMITER = \"/\";\n/**\n * Balanced bracket helper function.\n */\nfunction balanced(open, close, str, index) {\n    var count = 0;\n    var i = index;\n    while (i < str.length) {\n        if (str[i] === \"\\\\\") {\n            i += 2;\n            continue;\n        }\n        if (str[i] === close) {\n            count--;\n            if (count === 0)\n                return i + 1;\n        }\n        if (str[i] === open) {\n            count++;\n        }\n        i++;\n    }\n    return -1;\n}\n/**\n * Parse a string for the raw tokens.\n */\nfunction parse(str, options) {\n    if (options === void 0) { options = {}; }\n    var _a, _b;\n    var tokens = [];\n    var defaultDelimiter = (_a = options.delimiter, (_a !== null && _a !== void 0 ? _a : DEFAULT_DELIMITER));\n    var whitelist = (_b = options.whitelist, (_b !== null && _b !== void 0 ? _b : undefined));\n    var i = 0;\n    var key = 0;\n    var path = \"\";\n    var isEscaped = false;\n    // tslint:disable-next-line\n    while (i < str.length) {\n        var prefix = \"\";\n        var name = \"\";\n        var pattern = \"\";\n        // Ignore escaped sequences.\n        if (str[i] === \"\\\\\") {\n            i++;\n            path += str[i++];\n            isEscaped = true;\n            continue;\n        }\n        if (str[i] === \":\") {\n            while (++i < str.length) {\n                var code = str.charCodeAt(i);\n                if (\n                // `0-9`\n                (code >= 48 && code <= 57) ||\n                    // `A-Z`\n                    (code >= 65 && code <= 90) ||\n                    // `a-z`\n                    (code >= 97 && code <= 122) ||\n                    // `_`\n                    code === 95) {\n                    name += str[i];\n                    continue;\n                }\n                break;\n            }\n            // False positive on param name.\n            if (!name)\n                i--;\n        }\n        if (str[i] === \"(\") {\n            var end = balanced(\"(\", \")\", str, i);\n            // False positive on matching brackets.\n            if (end > -1) {\n                pattern = str.slice(i + 1, end - 1);\n                i = end;\n                if (pattern[0] === \"?\") {\n                    throw new TypeError(\"Path pattern must be a capturing group\");\n                }\n                if (/\\((?=[^?])/.test(pattern)) {\n                    var validPattern = pattern.replace(/\\((?=[^?])/, \"(?:\");\n                    throw new TypeError(\"Capturing groups are not allowed in pattern, use a non-capturing group: (\" + validPattern + \")\");\n                }\n            }\n        }\n        // Add regular characters to the path string.\n        if (name === \"\" && pattern === \"\") {\n            path += str[i++];\n            isEscaped = false;\n            continue;\n        }\n        // Extract the final character from `path` for the prefix.\n        if (path.length && !isEscaped) {\n            var char = path[path.length - 1];\n            var matches = whitelist ? whitelist.indexOf(char) > -1 : true;\n            if (matches) {\n                prefix = char;\n                path = path.slice(0, -1);\n            }\n        }\n        // Push the current path onto the list of tokens.\n        if (path.length) {\n            tokens.push(path);\n            path = \"\";\n        }\n        var repeat = str[i] === \"+\" || str[i] === \"*\";\n        var optional = str[i] === \"?\" || str[i] === \"*\";\n        var delimiter = prefix || defaultDelimiter;\n        // Increment `i` past modifier token.\n        if (repeat || optional)\n            i++;\n        tokens.push({\n            name: name || key++,\n            prefix: prefix,\n            delimiter: delimiter,\n            optional: optional,\n            repeat: repeat,\n            pattern: pattern ||\n                \"[^\" + escapeString(delimiter === defaultDelimiter\n                    ? delimiter\n                    : delimiter + defaultDelimiter) + \"]+?\"\n        });\n    }\n    if (path.length)\n        tokens.push(path);\n    return tokens;\n}\n/**\n * Compile a string to a template function for the path.\n */\nfunction compile(str, options) {\n    return tokensToFunction(parse(str, options), options);\n}\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction(tokens, options) {\n    if (options === void 0) { options = {}; }\n    var reFlags = flags(options);\n    var _a = options.encode, encode = _a === void 0 ? function (x) { return x; } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;\n    // Compile all the tokens into regexps.\n    var matches = tokens.map(function (token) {\n        if (typeof token === \"object\") {\n            return new RegExp(\"^(?:\" + token.pattern + \")$\", reFlags);\n        }\n    });\n    return function (data) {\n        var path = \"\";\n        for (var i = 0; i < tokens.length; i++) {\n            var token = tokens[i];\n            if (typeof token === \"string\") {\n                path += token;\n                continue;\n            }\n            var value = data ? data[token.name] : undefined;\n            if (Array.isArray(value)) {\n                if (!token.repeat) {\n                    throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not repeat, but got an array\");\n                }\n                if (value.length === 0) {\n                    if (token.optional)\n                        continue;\n                    throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to not be empty\");\n                }\n                for (var j = 0; j < value.length; j++) {\n                    var segment = encode(value[j], token);\n                    if (validate && !matches[i].test(segment)) {\n                        throw new TypeError(\"Expected all \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n                    }\n                    path += (j === 0 ? token.prefix : token.delimiter) + segment;\n                }\n                continue;\n            }\n            if (typeof value === \"string\" || typeof value === \"number\") {\n                var segment = encode(String(value), token);\n                if (validate && !matches[i].test(segment)) {\n                    throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to match \\\"\" + token.pattern + \"\\\", but got \\\"\" + segment + \"\\\"\");\n                }\n                path += token.prefix + segment;\n                continue;\n            }\n            if (token.optional)\n                continue;\n            var typeOfMessage = token.repeat ? \"an array\" : \"a string\";\n            throw new TypeError(\"Expected \\\"\" + token.name + \"\\\" to be \" + typeOfMessage);\n        }\n        return path;\n    };\n}\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nfunction match(str, options) {\n    var keys = [];\n    var re = pathToRegexp(str, keys, options);\n    return regexpToFunction(re, keys, options);\n}\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nfunction regexpToFunction(re, keys, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.decode, decode = _a === void 0 ? function (x) { return x; } : _a;\n    return function (pathname) {\n        var m = re.exec(pathname);\n        if (!m)\n            return false;\n        var path = m[0], index = m.index;\n        var params = Object.create(null);\n        var _loop_1 = function (i) {\n            // tslint:disable-next-line\n            if (m[i] === undefined)\n                return \"continue\";\n            var key = keys[i - 1];\n            if (key.repeat) {\n                params[key.name] = m[i].split(key.delimiter).map(function (value) {\n                    return decode(value, key);\n                });\n            }\n            else {\n                params[key.name] = decode(m[i], key);\n            }\n        };\n        for (var i = 1; i < m.length; i++) {\n            _loop_1(i);\n        }\n        return { path: path, index: index, params: params };\n    };\n}\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str) {\n    return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options) {\n    return options && options.sensitive ? \"\" : \"i\";\n}\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path, keys) {\n    if (!keys)\n        return path;\n    // Use a negative lookahead to match only capturing groups.\n    var groups = path.source.match(/\\((?!\\?)/g);\n    if (groups) {\n        for (var i = 0; i < groups.length; i++) {\n            keys.push({\n                name: i,\n                prefix: \"\",\n                delimiter: \"\",\n                optional: false,\n                repeat: false,\n                pattern: \"\"\n            });\n        }\n    }\n    return path;\n}\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(paths, keys, options) {\n    var parts = paths.map(function (path) { return pathToRegexp(path, keys, options).source; });\n    return new RegExp(\"(?:\" + parts.join(\"|\") + \")\", flags(options));\n}\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(path, keys, options) {\n    return tokensToRegexp(parse(path, options), keys, options);\n}\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nfunction tokensToRegexp(tokens, keys, options) {\n    if (options === void 0) { options = {}; }\n    var strict = options.strict, _a = options.start, start = _a === void 0 ? true : _a, _b = options.end, end = _b === void 0 ? true : _b, _c = options.delimiter, delimiter = _c === void 0 ? DEFAULT_DELIMITER : _c, _d = options.encode, encode = _d === void 0 ? function (x) { return x; } : _d;\n    var endsWith = (typeof options.endsWith === \"string\"\n        ? options.endsWith.split(\"\")\n        : options.endsWith || [])\n        .map(escapeString)\n        .concat(\"$\")\n        .join(\"|\");\n    var route = start ? \"^\" : \"\";\n    // Iterate over the tokens and create our regexp string.\n    for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {\n        var token = tokens_1[_i];\n        if (typeof token === \"string\") {\n            route += escapeString(encode(token));\n        }\n        else {\n            var capture = token.repeat\n                ? \"(?:\" + token.pattern + \")(?:\" + escapeString(token.delimiter) + \"(?:\" + token.pattern + \"))*\"\n                : token.pattern;\n            if (keys)\n                keys.push(token);\n            if (token.optional) {\n                if (!token.prefix) {\n                    route += \"(\" + capture + \")?\";\n                }\n                else {\n                    route += \"(?:\" + escapeString(token.prefix) + \"(\" + capture + \"))?\";\n                }\n            }\n            else {\n                route += escapeString(token.prefix) + \"(\" + capture + \")\";\n            }\n        }\n    }\n    if (end) {\n        if (!strict)\n            route += \"(?:\" + escapeString(delimiter) + \")?\";\n        route += endsWith === \"$\" ? \"$\" : \"(?=\" + endsWith + \")\";\n    }\n    else {\n        var endToken = tokens[tokens.length - 1];\n        var isEndDelimited = typeof endToken === \"string\"\n            ? endToken[endToken.length - 1] === delimiter\n            : // tslint:disable-next-line\n                endToken === undefined;\n        if (!strict) {\n            route += \"(?:\" + escapeString(delimiter) + \"(?=\" + endsWith + \"))?\";\n        }\n        if (!isEndDelimited) {\n            route += \"(?=\" + escapeString(delimiter) + \"|\" + endsWith + \")\";\n        }\n    }\n    return new RegExp(route, flags(options));\n}\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nfunction pathToRegexp(path, keys, options) {\n    if (path instanceof RegExp) {\n        return regexpToRegexp(path, keys);\n    }\n    if (Array.isArray(path)) {\n        return arrayToRegexp(path, keys, options);\n    }\n    return stringToRegexp(path, keys, options);\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/swork-router/node_modules/path-to-regexp/dist.es2015/index.js\n");

/***/ }),

/***/ "./node_modules/swork/dist/builder.js":
/*!********************************************!*\
  !*** ./node_modules/swork/dist/builder.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst fetch_context_1 = __webpack_require__(/*! ./fetch-context */ \"./node_modules/swork/dist/fetch-context.js\");\r\nfunction addExtendableEvent(eventType, handlers) {\r\n    if (handlers.length) {\r\n        self.addEventListener(eventType, exports.eventListeners.extendableEvent(handlers));\r\n    }\r\n}\r\nfunction addFetchEvent(delegate) {\r\n    self.addEventListener(\"fetch\", exports.eventListeners.fetchEvent(delegate));\r\n}\r\nfunction getExtendableEventListener(handlers) {\r\n    const handler = exports.eventHandlers.extendableEvent(handlers);\r\n    return (event) => __awaiter(this, void 0, void 0, function* () {\r\n        event.waitUntil(handler(event));\r\n    });\r\n}\r\nfunction getFetchEventListener(delegate) {\r\n    return (event) => {\r\n        const fetchEvent = event;\r\n        const handler = exports.eventHandlers.fetchEvent(delegate, fetchEvent);\r\n        fetchEvent.waitUntil(handler);\r\n        fetchEvent.respondWith(handler);\r\n    };\r\n}\r\nfunction getExtendableEventHandler(handlers) {\r\n    return (event) => __awaiter(this, void 0, void 0, function* () {\r\n        yield Promise.all(handlers.map((handler) => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                yield handler(event);\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        })));\r\n    });\r\n}\r\nfunction getFetchEventHandler(delegate, fetchEvent) {\r\n    return (() => __awaiter(this, void 0, void 0, function* () {\r\n        const fetchContext = new fetch_context_1.FetchContext(fetchEvent);\r\n        try {\r\n            yield delegate(fetchContext);\r\n        }\r\n        catch (e) {\r\n            console.error(e);\r\n        }\r\n        return fetchContext.response;\r\n    }))();\r\n}\r\nexports.add = {\r\n    activate: (handlers) => addExtendableEvent(\"activate\", handlers),\r\n    fetch: addFetchEvent,\r\n    install: (handlers) => addExtendableEvent(\"install\", handlers),\r\n    message: (handlers) => addExtendableEvent(\"message\", handlers),\r\n    notificationClick: (handlers) => addExtendableEvent(\"notificationclick\", handlers),\r\n    notificationClose: (handlers) => addExtendableEvent(\"notificationclose\", handlers),\r\n    push: (handlers) => addExtendableEvent(\"push\", handlers),\r\n    pushSubscriptionChange: (handlers) => addExtendableEvent(\"pushsubscriptionchange\", handlers),\r\n    sync: (handlers) => addExtendableEvent(\"sync\", handlers),\r\n};\r\nexports.eventListeners = {\r\n    extendableEvent: getExtendableEventListener,\r\n    fetchEvent: getFetchEventListener,\r\n};\r\nexports.eventHandlers = {\r\n    extendableEvent: getExtendableEventHandler,\r\n    fetchEvent: getFetchEventHandler,\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dvcmsvZGlzdC9idWlsZGVyLmpzP2Y1MjIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDJCQUEyQiwrREFBK0QsZ0JBQWdCLEVBQUUsRUFBRTtBQUM5RztBQUNBLG1DQUFtQyxNQUFNLDZCQUE2QixFQUFFLFlBQVksV0FBVyxFQUFFO0FBQ2pHLGtDQUFrQyxNQUFNLGlDQUFpQyxFQUFFLFlBQVksV0FBVyxFQUFFO0FBQ3BHLCtCQUErQixxRkFBcUY7QUFDcEg7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBOEMsY0FBYztBQUM1RCx3QkFBd0IsbUJBQU8sQ0FBQyxtRUFBaUI7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3N3b3JrL2Rpc3QvYnVpbGRlci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuY29uc3QgZmV0Y2hfY29udGV4dF8xID0gcmVxdWlyZShcIi4vZmV0Y2gtY29udGV4dFwiKTtcclxuZnVuY3Rpb24gYWRkRXh0ZW5kYWJsZUV2ZW50KGV2ZW50VHlwZSwgaGFuZGxlcnMpIHtcclxuICAgIGlmIChoYW5kbGVycy5sZW5ndGgpIHtcclxuICAgICAgICBzZWxmLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBleHBvcnRzLmV2ZW50TGlzdGVuZXJzLmV4dGVuZGFibGVFdmVudChoYW5kbGVycykpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIGFkZEZldGNoRXZlbnQoZGVsZWdhdGUpIHtcclxuICAgIHNlbGYuYWRkRXZlbnRMaXN0ZW5lcihcImZldGNoXCIsIGV4cG9ydHMuZXZlbnRMaXN0ZW5lcnMuZmV0Y2hFdmVudChkZWxlZ2F0ZSkpO1xyXG59XHJcbmZ1bmN0aW9uIGdldEV4dGVuZGFibGVFdmVudExpc3RlbmVyKGhhbmRsZXJzKSB7XHJcbiAgICBjb25zdCBoYW5kbGVyID0gZXhwb3J0cy5ldmVudEhhbmRsZXJzLmV4dGVuZGFibGVFdmVudChoYW5kbGVycyk7XHJcbiAgICByZXR1cm4gKGV2ZW50KSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgZXZlbnQud2FpdFVudGlsKGhhbmRsZXIoZXZlbnQpKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdldEZldGNoRXZlbnRMaXN0ZW5lcihkZWxlZ2F0ZSkge1xyXG4gICAgcmV0dXJuIChldmVudCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGZldGNoRXZlbnQgPSBldmVudDtcclxuICAgICAgICBjb25zdCBoYW5kbGVyID0gZXhwb3J0cy5ldmVudEhhbmRsZXJzLmZldGNoRXZlbnQoZGVsZWdhdGUsIGZldGNoRXZlbnQpO1xyXG4gICAgICAgIGZldGNoRXZlbnQud2FpdFVudGlsKGhhbmRsZXIpO1xyXG4gICAgICAgIGZldGNoRXZlbnQucmVzcG9uZFdpdGgoaGFuZGxlcik7XHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIGdldEV4dGVuZGFibGVFdmVudEhhbmRsZXIoaGFuZGxlcnMpIHtcclxuICAgIHJldHVybiAoZXZlbnQpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICB5aWVsZCBQcm9taXNlLmFsbChoYW5kbGVycy5tYXAoKGhhbmRsZXIpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHlpZWxkIGhhbmRsZXIoZXZlbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSkpKTtcclxuICAgIH0pO1xyXG59XHJcbmZ1bmN0aW9uIGdldEZldGNoRXZlbnRIYW5kbGVyKGRlbGVnYXRlLCBmZXRjaEV2ZW50KSB7XHJcbiAgICByZXR1cm4gKCgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICBjb25zdCBmZXRjaENvbnRleHQgPSBuZXcgZmV0Y2hfY29udGV4dF8xLkZldGNoQ29udGV4dChmZXRjaEV2ZW50KTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICB5aWVsZCBkZWxlZ2F0ZShmZXRjaENvbnRleHQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmV0Y2hDb250ZXh0LnJlc3BvbnNlO1xyXG4gICAgfSkpKCk7XHJcbn1cclxuZXhwb3J0cy5hZGQgPSB7XHJcbiAgICBhY3RpdmF0ZTogKGhhbmRsZXJzKSA9PiBhZGRFeHRlbmRhYmxlRXZlbnQoXCJhY3RpdmF0ZVwiLCBoYW5kbGVycyksXHJcbiAgICBmZXRjaDogYWRkRmV0Y2hFdmVudCxcclxuICAgIGluc3RhbGw6IChoYW5kbGVycykgPT4gYWRkRXh0ZW5kYWJsZUV2ZW50KFwiaW5zdGFsbFwiLCBoYW5kbGVycyksXHJcbiAgICBtZXNzYWdlOiAoaGFuZGxlcnMpID0+IGFkZEV4dGVuZGFibGVFdmVudChcIm1lc3NhZ2VcIiwgaGFuZGxlcnMpLFxyXG4gICAgbm90aWZpY2F0aW9uQ2xpY2s6IChoYW5kbGVycykgPT4gYWRkRXh0ZW5kYWJsZUV2ZW50KFwibm90aWZpY2F0aW9uY2xpY2tcIiwgaGFuZGxlcnMpLFxyXG4gICAgbm90aWZpY2F0aW9uQ2xvc2U6IChoYW5kbGVycykgPT4gYWRkRXh0ZW5kYWJsZUV2ZW50KFwibm90aWZpY2F0aW9uY2xvc2VcIiwgaGFuZGxlcnMpLFxyXG4gICAgcHVzaDogKGhhbmRsZXJzKSA9PiBhZGRFeHRlbmRhYmxlRXZlbnQoXCJwdXNoXCIsIGhhbmRsZXJzKSxcclxuICAgIHB1c2hTdWJzY3JpcHRpb25DaGFuZ2U6IChoYW5kbGVycykgPT4gYWRkRXh0ZW5kYWJsZUV2ZW50KFwicHVzaHN1YnNjcmlwdGlvbmNoYW5nZVwiLCBoYW5kbGVycyksXHJcbiAgICBzeW5jOiAoaGFuZGxlcnMpID0+IGFkZEV4dGVuZGFibGVFdmVudChcInN5bmNcIiwgaGFuZGxlcnMpLFxyXG59O1xyXG5leHBvcnRzLmV2ZW50TGlzdGVuZXJzID0ge1xyXG4gICAgZXh0ZW5kYWJsZUV2ZW50OiBnZXRFeHRlbmRhYmxlRXZlbnRMaXN0ZW5lcixcclxuICAgIGZldGNoRXZlbnQ6IGdldEZldGNoRXZlbnRMaXN0ZW5lcixcclxufTtcclxuZXhwb3J0cy5ldmVudEhhbmRsZXJzID0ge1xyXG4gICAgZXh0ZW5kYWJsZUV2ZW50OiBnZXRFeHRlbmRhYmxlRXZlbnRIYW5kbGVyLFxyXG4gICAgZmV0Y2hFdmVudDogZ2V0RmV0Y2hFdmVudEhhbmRsZXIsXHJcbn07XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/swork/dist/builder.js\n");

/***/ }),

/***/ "./node_modules/swork/dist/configuration.js":
/*!**************************************************!*\
  !*** ./node_modules/swork/dist/configuration.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.configuration = {\r\n    environment: \"production\",\r\n    origin: self.location ? self.location.origin : \"\",\r\n    version: \"1.0.0\",\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dvcmsvZGlzdC9jb25maWd1cmF0aW9uLmpzPzJkNTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3N3b3JrL2Rpc3QvY29uZmlndXJhdGlvbi5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuY29uZmlndXJhdGlvbiA9IHtcclxuICAgIGVudmlyb25tZW50OiBcInByb2R1Y3Rpb25cIixcclxuICAgIG9yaWdpbjogc2VsZi5sb2NhdGlvbiA/IHNlbGYubG9jYXRpb24ub3JpZ2luIDogXCJcIixcclxuICAgIHZlcnNpb246IFwiMS4wLjBcIixcclxufTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/swork/dist/configuration.js\n");

/***/ }),

/***/ "./node_modules/swork/dist/fetch-context.js":
/*!**************************************************!*\
  !*** ./node_modules/swork/dist/fetch-context.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass FetchContext {\r\n    constructor(event) {\r\n        this.event = event;\r\n        this.request = event.request;\r\n    }\r\n}\r\nexports.FetchContext = FetchContext;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dvcmsvZGlzdC9mZXRjaC1jb250ZXh0LmpzPzA5NmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9zd29yay9kaXN0L2ZldGNoLWNvbnRleHQuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5jbGFzcyBGZXRjaENvbnRleHQge1xyXG4gICAgY29uc3RydWN0b3IoZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7XHJcbiAgICAgICAgdGhpcy5yZXF1ZXN0ID0gZXZlbnQucmVxdWVzdDtcclxuICAgIH1cclxufVxyXG5leHBvcnRzLkZldGNoQ29udGV4dCA9IEZldGNoQ29udGV4dDtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/swork/dist/fetch-context.js\n");

/***/ }),

/***/ "./node_modules/swork/dist/index.js":
/*!******************************************!*\
  !*** ./node_modules/swork/dist/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst configuration_1 = __webpack_require__(/*! ./configuration */ \"./node_modules/swork/dist/configuration.js\");\r\nexports.configuration = configuration_1.configuration;\r\nconst fetch_context_1 = __webpack_require__(/*! ./fetch-context */ \"./node_modules/swork/dist/fetch-context.js\");\r\nexports.FetchContext = fetch_context_1.FetchContext;\r\nconst swork_1 = __webpack_require__(/*! ./swork */ \"./node_modules/swork/dist/swork.js\");\r\nexports.Swork = swork_1.Swork;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dvcmsvZGlzdC9pbmRleC5qcz8wMmFjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQsd0JBQXdCLG1CQUFPLENBQUMsbUVBQWlCO0FBQ2pEO0FBQ0Esd0JBQXdCLG1CQUFPLENBQUMsbUVBQWlCO0FBQ2pEO0FBQ0EsZ0JBQWdCLG1CQUFPLENBQUMsbURBQVM7QUFDakMiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3dvcmsvZGlzdC9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGNvbmZpZ3VyYXRpb25fMSA9IHJlcXVpcmUoXCIuL2NvbmZpZ3VyYXRpb25cIik7XHJcbmV4cG9ydHMuY29uZmlndXJhdGlvbiA9IGNvbmZpZ3VyYXRpb25fMS5jb25maWd1cmF0aW9uO1xyXG5jb25zdCBmZXRjaF9jb250ZXh0XzEgPSByZXF1aXJlKFwiLi9mZXRjaC1jb250ZXh0XCIpO1xyXG5leHBvcnRzLkZldGNoQ29udGV4dCA9IGZldGNoX2NvbnRleHRfMS5GZXRjaENvbnRleHQ7XHJcbmNvbnN0IHN3b3JrXzEgPSByZXF1aXJlKFwiLi9zd29ya1wiKTtcclxuZXhwb3J0cy5Td29yayA9IHN3b3JrXzEuU3dvcms7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/swork/dist/index.js\n");

/***/ }),

/***/ "./node_modules/swork/dist/swork.js":
/*!******************************************!*\
  !*** ./node_modules/swork/dist/swork.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst builder = __webpack_require__(/*! ./builder */ \"./node_modules/swork/dist/builder.js\");\r\nconst allEvents = [\"activate\", \"install\", \"message\", \"notificationclick\", \"notificationclose\", \"push\", \"pushsubscriptionchange\", \"sync\"];\r\n/**\r\n * A Swork application. Contains logic to create event handlers and\r\n * middleware pipeline for a fetch request.\r\n *\r\n * @export\r\n * @class Swork\r\n */\r\nclass Swork {\r\n    /**\r\n     * Creates an instance of Swork.\r\n     * @memberof Swork\r\n     */\r\n    constructor() {\r\n        this.middlewares = [];\r\n        this.eventHandlers = new Map();\r\n        allEvents.forEach((x) => {\r\n            this.eventHandlers.set(x, []);\r\n        });\r\n    }\r\n    /**\r\n     * Registers all event handlers with the associated event and\r\n     * attaches the middleware pipeline.\r\n     *\r\n     * @memberof Swork\r\n     */\r\n    listen() {\r\n        allEvents.forEach((x) => {\r\n            const handlers = this.eventHandlers.get(x);\r\n            switch (x) {\r\n                case \"activate\":\r\n                    builder.add.activate(handlers);\r\n                    break;\r\n                case \"install\":\r\n                    builder.add.install(handlers);\r\n                    break;\r\n                case \"message\":\r\n                    builder.add.message(handlers);\r\n                    break;\r\n                case \"notificationclick\":\r\n                    builder.add.notificationClick(handlers);\r\n                    break;\r\n                case \"notificationclose\":\r\n                    builder.add.notificationClose(handlers);\r\n                    break;\r\n                case \"push\":\r\n                    builder.add.push(handlers);\r\n                    break;\r\n                case \"pushsubscriptionchange\":\r\n                    builder.add.pushSubscriptionChange(handlers);\r\n                    break;\r\n                case \"sync\":\r\n                    builder.add.sync(handlers);\r\n                    break;\r\n            }\r\n        });\r\n        const delegate = this.build();\r\n        builder.add.fetch(delegate);\r\n    }\r\n    /**\r\n     * Adds a middleware to the fetch request pipeline\r\n     *\r\n     * @param {(...Array<(Swork | Middleware | Array<(Swork | Middleware)>)>)} params\r\n     * @returns {Swork}\r\n     * @memberof Swork\r\n     */\r\n    use(...params) {\r\n        params.forEach((param) => {\r\n            if (!Array.isArray(param)) {\r\n                param = [param];\r\n            }\r\n            param.forEach((p) => {\r\n                if (p instanceof Swork) {\r\n                    allEvents.forEach((x) => {\r\n                        Array.prototype.push.apply(this.eventHandlers.get(x), p.eventHandlers.get(x));\r\n                    });\r\n                    this.middlewares.push.apply(this.middlewares, p.middlewares);\r\n                }\r\n                else {\r\n                    this.middlewares.push(p);\r\n                }\r\n            });\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds an event handler for the provided event type.\r\n     *\r\n     * @param {EventType} event\r\n     * @param {(...Array<(event: any) => Promise<void> | void>)} handlers\r\n     * @memberof Swork\r\n     */\r\n    on(event, ...handlers) {\r\n        Array.prototype.push.apply(this.eventHandlers.get(event), handlers);\r\n    }\r\n    build() {\r\n        this.middlewares.push((context) => {\r\n            context.response = fetch(context.request);\r\n            return Promise.resolve();\r\n        });\r\n        return (context) => {\r\n            let index = -1;\r\n            const dispatch = (currentIndex) => {\r\n                if (currentIndex <= index) {\r\n                    return Promise.reject(new Error(\"next() called multiple times\"));\r\n                }\r\n                index = currentIndex;\r\n                const middleware = this.middlewares[currentIndex];\r\n                return Promise.resolve(middleware(context, dispatch.bind(null, currentIndex + 1)));\r\n            };\r\n            return dispatch(0);\r\n        };\r\n    }\r\n}\r\nexports.Swork = Swork;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3dvcmsvZGlzdC9zd29yay5qcz83MGEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQsZ0JBQWdCLG1CQUFPLENBQUMsdURBQVc7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLCtEQUErRDtBQUM5RSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsaURBQWlEO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvc3dvcmsvZGlzdC9zd29yay5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IGJ1aWxkZXIgPSByZXF1aXJlKFwiLi9idWlsZGVyXCIpO1xyXG5jb25zdCBhbGxFdmVudHMgPSBbXCJhY3RpdmF0ZVwiLCBcImluc3RhbGxcIiwgXCJtZXNzYWdlXCIsIFwibm90aWZpY2F0aW9uY2xpY2tcIiwgXCJub3RpZmljYXRpb25jbG9zZVwiLCBcInB1c2hcIiwgXCJwdXNoc3Vic2NyaXB0aW9uY2hhbmdlXCIsIFwic3luY1wiXTtcclxuLyoqXHJcbiAqIEEgU3dvcmsgYXBwbGljYXRpb24uIENvbnRhaW5zIGxvZ2ljIHRvIGNyZWF0ZSBldmVudCBoYW5kbGVycyBhbmRcclxuICogbWlkZGxld2FyZSBwaXBlbGluZSBmb3IgYSBmZXRjaCByZXF1ZXN0LlxyXG4gKlxyXG4gKiBAZXhwb3J0XHJcbiAqIEBjbGFzcyBTd29ya1xyXG4gKi9cclxuY2xhc3MgU3dvcmsge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIFN3b3JrLlxyXG4gICAgICogQG1lbWJlcm9mIFN3b3JrXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMubWlkZGxld2FyZXMgPSBbXTtcclxuICAgICAgICB0aGlzLmV2ZW50SGFuZGxlcnMgPSBuZXcgTWFwKCk7XHJcbiAgICAgICAgYWxsRXZlbnRzLmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudEhhbmRsZXJzLnNldCh4LCBbXSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlZ2lzdGVycyBhbGwgZXZlbnQgaGFuZGxlcnMgd2l0aCB0aGUgYXNzb2NpYXRlZCBldmVudCBhbmRcclxuICAgICAqIGF0dGFjaGVzIHRoZSBtaWRkbGV3YXJlIHBpcGVsaW5lLlxyXG4gICAgICpcclxuICAgICAqIEBtZW1iZXJvZiBTd29ya1xyXG4gICAgICovXHJcbiAgICBsaXN0ZW4oKSB7XHJcbiAgICAgICAgYWxsRXZlbnRzLmZvckVhY2goKHgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaGFuZGxlcnMgPSB0aGlzLmV2ZW50SGFuZGxlcnMuZ2V0KHgpO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHgpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJhY3RpdmF0ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkLmFjdGl2YXRlKGhhbmRsZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJpbnN0YWxsXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5hZGQuaW5zdGFsbChoYW5kbGVycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwibWVzc2FnZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkLm1lc3NhZ2UoaGFuZGxlcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm5vdGlmaWNhdGlvbmNsaWNrXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5hZGQubm90aWZpY2F0aW9uQ2xpY2soaGFuZGxlcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIm5vdGlmaWNhdGlvbmNsb3NlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5hZGQubm90aWZpY2F0aW9uQ2xvc2UoaGFuZGxlcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInB1c2hcIjpcclxuICAgICAgICAgICAgICAgICAgICBidWlsZGVyLmFkZC5wdXNoKGhhbmRsZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJwdXNoc3Vic2NyaXB0aW9uY2hhbmdlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgYnVpbGRlci5hZGQucHVzaFN1YnNjcmlwdGlvbkNoYW5nZShoYW5kbGVycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwic3luY1wiOlxyXG4gICAgICAgICAgICAgICAgICAgIGJ1aWxkZXIuYWRkLnN5bmMoaGFuZGxlcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgZGVsZWdhdGUgPSB0aGlzLmJ1aWxkKCk7XHJcbiAgICAgICAgYnVpbGRlci5hZGQuZmV0Y2goZGVsZWdhdGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGEgbWlkZGxld2FyZSB0byB0aGUgZmV0Y2ggcmVxdWVzdCBwaXBlbGluZVxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7KC4uLkFycmF5PChTd29yayB8IE1pZGRsZXdhcmUgfCBBcnJheTwoU3dvcmsgfCBNaWRkbGV3YXJlKT4pPil9IHBhcmFtc1xyXG4gICAgICogQHJldHVybnMge1N3b3JrfVxyXG4gICAgICogQG1lbWJlcm9mIFN3b3JrXHJcbiAgICAgKi9cclxuICAgIHVzZSguLi5wYXJhbXMpIHtcclxuICAgICAgICBwYXJhbXMuZm9yRWFjaCgocGFyYW0pID0+IHtcclxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHBhcmFtKSkge1xyXG4gICAgICAgICAgICAgICAgcGFyYW0gPSBbcGFyYW1dO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBhcmFtLmZvckVhY2goKHApID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChwIGluc3RhbmNlb2YgU3dvcmspIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxFdmVudHMuZm9yRWFjaCgoeCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0aGlzLmV2ZW50SGFuZGxlcnMuZ2V0KHgpLCBwLmV2ZW50SGFuZGxlcnMuZ2V0KHgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pZGRsZXdhcmVzLnB1c2guYXBwbHkodGhpcy5taWRkbGV3YXJlcywgcC5taWRkbGV3YXJlcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1pZGRsZXdhcmVzLnB1c2gocCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIGFuIGV2ZW50IGhhbmRsZXIgZm9yIHRoZSBwcm92aWRlZCBldmVudCB0eXBlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7RXZlbnRUeXBlfSBldmVudFxyXG4gICAgICogQHBhcmFtIHsoLi4uQXJyYXk8KGV2ZW50OiBhbnkpID0+IFByb21pc2U8dm9pZD4gfCB2b2lkPil9IGhhbmRsZXJzXHJcbiAgICAgKiBAbWVtYmVyb2YgU3dvcmtcclxuICAgICAqL1xyXG4gICAgb24oZXZlbnQsIC4uLmhhbmRsZXJzKSB7XHJcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkodGhpcy5ldmVudEhhbmRsZXJzLmdldChldmVudCksIGhhbmRsZXJzKTtcclxuICAgIH1cclxuICAgIGJ1aWxkKCkge1xyXG4gICAgICAgIHRoaXMubWlkZGxld2FyZXMucHVzaCgoY29udGV4dCkgPT4ge1xyXG4gICAgICAgICAgICBjb250ZXh0LnJlc3BvbnNlID0gZmV0Y2goY29udGV4dC5yZXF1ZXN0KTtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiAoY29udGV4dCkgPT4ge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSAtMTtcclxuICAgICAgICAgICAgY29uc3QgZGlzcGF0Y2ggPSAoY3VycmVudEluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudEluZGV4IDw9IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcihcIm5leHQoKSBjYWxsZWQgbXVsdGlwbGUgdGltZXNcIikpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBjdXJyZW50SW5kZXg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtaWRkbGV3YXJlID0gdGhpcy5taWRkbGV3YXJlc1tjdXJyZW50SW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtaWRkbGV3YXJlKGNvbnRleHQsIGRpc3BhdGNoLmJpbmQobnVsbCwgY3VycmVudEluZGV4ICsgMSkpKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKDApO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5Td29yayA9IFN3b3JrO1xyXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/swork/dist/swork.js\n");

/***/ }),

/***/ "./src/service.worker.js":
/*!*******************************!*\
  !*** ./src/service.worker.js ***!
  \*******************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var swork__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! swork */ \"./node_modules/swork/dist/index.js\");\n/* harmony import */ var swork__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(swork__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var swork_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! swork-router */ \"./node_modules/swork-router/dist/index.js\");\n/* harmony import */ var swork_router__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(swork_router__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mustache */ \"./node_modules/mustache/mustache.js\");\n/* harmony import */ var mustache__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(mustache__WEBPACK_IMPORTED_MODULE_2__);\n\r\n\r\n\r\n// import nonexistent_chart_html from 'raw-loader!./charts/nonexistent-chart.html';\r\n// import chart_html from 'raw-loader!./charts/chart.html';\r\n\r\nconst app = new swork__WEBPACK_IMPORTED_MODULE_0__[\"Swork\"]();\r\nconst router = new swork_router__WEBPACK_IMPORTED_MODULE_1__[\"Router\"]({\r\n    prefix: \"/dist\"\r\n});\r\n\r\nconst repls = {};\r\nconst charts = {};\r\n\r\nfunction make_json_response(body, status){\r\n    status.headers = new Headers({\r\n        \"Content-Type\" : \"application/json\"\r\n    });\r\n    return new Response(JSON.stringify(body), status);\r\n}\r\n\r\nfunction make_html_response(body, status){\r\n    status.headers = new Headers({\r\n        \"Content-Type\" : \"text/html; charset=UTF-8\"\r\n    });\r\n    return new Response(body, status);\r\n}\r\n\r\nasync function get_owning_client(chart_name){\r\n    if(!(chart_name in charts)){\r\n        return undefined;\r\n    }\r\n    let owningClientId = charts[chart_name];\r\n    let owningClient = await self.clients.get(owningClientId);\r\n    if(!owningClient){\r\n        console.log(\"Undefiend owning client, deleting chart.\");\r\n        if(owningClientId in repls){\r\n            repls[owningClientId].close();\r\n            delete repls[owningClientId];\r\n        }\r\n        delete charts[chart_name];\r\n    }\r\n    return owningClient;\r\n}\r\n\r\nrouter.put(\"/api/charts/:name\", async (context) => {\r\n    let clientId = context.event.clientId;\r\n    let name = context.params.name;\r\n    let owningClient = await get_owning_client(name);\r\n    if(owningClient){\r\n        context.response = make_json_response({ \r\n                response : `Chart \"${name}\" already exists.`,\r\n                code : \"put-chart::failed::already-exists\",\r\n                same_repl_owns_chart : clientId === owningClient.id\r\n            }, \r\n            { status : 409,  statusText : \"Chart already exists\" }\r\n        );\r\n        return;\r\n    }\r\n    charts[name] = clientId;\r\n    context.response = make_json_response(\r\n        { response : `Created chart \"${name}\".`, code : \"put-chart::succeeded\" },\r\n        { status : 201,   statusText : \"Created chart.\" }\r\n    );\r\n});\r\n\r\n\r\nrouter.get(\"/api/charts/:name\", async (context) => {\r\n    let { name } = context.params;\r\n    let owningClient = await get_owning_client(name);\r\n    if(owningClient){\r\n        context.response = make_json_response(\r\n            { clientId : owningClient.id, code : \"get-chart::succeeded\" },\r\n            { status : 200, statusText : \"Found chart\" }\r\n        );\r\n        return;\r\n    }\r\n    context.response = make_json_response({ code : \"get-chart::failed::not-found\" }, {status : 404, statusText : \"Chart not found.\"});\r\n});\r\n\r\n\r\nrouter.get(\"/charts/:name\", async (context) => {\r\n    let { name } = context.params;\r\n    if(name.endsWith(\".js\")){\r\n        context.response = fetch(`/dist/charts/${name}`);\r\n        return;\r\n    }\r\n    let owningClient = await get_owning_client(name);\r\n    if(owningClient){\r\n        let chart_html = await (await fetch(\"charts/chart.html\")).text();\r\n        context.response = make_html_response(\r\n            mustache__WEBPACK_IMPORTED_MODULE_2___default.a.render(chart_html,\r\n                { clientId : owningClient.id, chart_name : name }),\r\n            { status : 200, statusText : \"Found chart\" }\r\n        );\r\n        return;\r\n    }\r\n    let nonexistent_chart_html = await (await fetch(\"charts/nonexistent-chart.html\")).text();\r\n    context.response = make_html_response(\r\n        mustache__WEBPACK_IMPORTED_MODULE_2___default.a.render(nonexistent_chart_html, { chart_name : name }), \r\n        {status : 200, statusText : \"Chart not found.\"}\r\n    );\r\n});\r\n\r\napp.on(\"message\", handleMessage)\r\n\r\napp.use(router.routes());\r\n \r\napp.listen();\r\n\r\nlet pyodideWorkers = {};\r\n\r\nfunction handleMessage(event){\r\n    console.log(\"service_worker:: received message from a client:\", event.data, event);\r\n    let message = event.data;\r\n    if(!message.cmd){\r\n        throw Error(\"Undefined command\")\r\n    }\r\n    if(!message.cmd in messageDispatch){\r\n        throw Error(\"Unknown command.\");\r\n    }\r\n    messageDispatch[message.cmd](event);\r\n}\r\n\r\nlet messageDispatch = {\r\n    pyodide_worker_channel : installPyodidePort,\r\n    subscribe_chart_display : passChartChannelToPyodide\r\n};\r\n\r\nfunction installPyodidePort(event){\r\n    let port = event.data.port;\r\n    console.log(`Service worker :: installing pyodide port :: id : ${event.source.id}`);\r\n    port.addEventListener(\"message\", handlePyodideMessage);\r\n    repls[event.source.id] = port;\r\n    port.start();\r\n}\r\n\r\nfunction handlePyodideMessage(event){\r\n    console.error(`Unexpected message from pyodide repl`, event.data, event);\r\n    throw Error(\"Unexpected message from pyodide repl:\", event.data);\r\n}\r\n\r\nasync function passChartChannelToPyodide(event){\r\n    let { port, chart_name } = event.data;\r\n    event.data.client_id = event.source.id;\r\n    let owningClient = await get_owning_client(chart_name);\r\n    console.log(`Owning client Id : ${owningClient.id}`);\r\n    let repl_port = repls[owningClient.id];\r\n    repl_port.postMessage(event.data, [port]);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/service.worker.js\n");

/***/ })

/******/ });