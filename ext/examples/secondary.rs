/// This example uses secondary.rs to compute d_2 on x_{65, 4}. The code is similar to that in the
/// secondary command, but with hardcoded values. I also use this for performance benchmarking.
use ext::resolution::Resolution;
use ext::secondary::compute_delta;
use ext::utils::construct_s_2;

use std::fs::File;
use std::io::BufReader;
use std::path::Path;
use std::time::Instant;

use saveload::Load;

fn main() -> std::io::Result<()> {
    // Use a helper function to create s_2.
    let bundle = construct_s_2("milnor");
    let mut resolution = &*bundle.resolution.read();

    // Try to load the save file generated by create_resolution.rs. The code is slightly convoluted
    // to deal with lifetime issues.
    let saved_resolution;
    if Path::new("resolution.save").exists() {
        let f = File::open("resolution.save")?;
        let mut f = BufReader::new(f);
        saved_resolution = Resolution::load(&mut f, &bundle.chain_complex)?;
        resolution = &saved_resolution;
    }

    // Compute the minimal resolution R_{s, t}
    resolution.resolve_through_bidegree(6, 70);

    let start = Instant::now();
    // deltas is a vector of FreeModuleHomomorphisms R_{s, t} -> R_{s - 2, t - 1} that is dual to
    // the d_2 map. The vector is indexed by s with the first entry being s = 3.
    let deltas = compute_delta(&resolution.inner, 6, 70);
    println!("Time elapsed: {:.2?}", start.elapsed());

    // We can now get the matrix of the d_2 starting at (65, 4).
    let output = deltas[6 - 3].hom_k(69);

    // dim R_{65, 4} = 1 and the generator is the last basis element.
    println!("d_2 x_{{65, 4}} = {}", output[0][0]);

    Ok(())
}
